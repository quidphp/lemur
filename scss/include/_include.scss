// compileOnSave: false

/*
 * This file is part of the QuidPHP package.
 * Website: https://quidphp.com
 * License: https://github.com/quidphp/lemur/blob/master/LICENSE
 */

// include
// stylesheet containing many helpers mixins

// var
// variable par défaut
$font: 'Arial', sans-serif;
$white: #fff;
$black: #000;
$media: $uriMedia;

// reset
// mixin utilisé pour attribuer des styles de base sur le document
@mixin reset() {
    *,
    *::before,
    *::after {
        box-sizing: inherit;
    }
    html {
        height: 100%;
        box-sizing: border-box;
        font-family: sans-serif;
        font-size: 62.5%;
        -ms-text-size-adjust: 100%;
        -ms-overflow-style: scrollbar;
        -webkit-tap-highlight-color: transparent;
        -moz-osx-font-smoothing: grayscale;
    }
    body {
        height: 100%;
        font-family: $font;
        font-size: 1.6rem;
        background-color: $white;
        font-weight: 400;
        line-height: 1.4;
        color: $black;
        text-align: left;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        margin: 0;
        font-weight: normal;
    }
    p {
        margin: 0;
    }
    ul,
    ol {
        margin: 0;
        padding: 0;
    }
    img {
        max-width: 100%;
        box-sizing: content-box;
    }
    em {
        font-style: italic;
    }
    a {
        @include transitions(color 0.3s, background-color 0.3s, opacity 0.3s, border 0.3s);
        text-decoration: none;
        color: $black;
    }
    table {
        border-collapse: collapse;
        font-weight: normal;
        vertical-align: middle;
        box-sizing: border-box;
        -webkit-box-sizing: content-box;
        -moz-box-sizing: border-box;

        td,
        th {
            border: 0;
            padding: 0;
            font-weight: inherit;
            vertical-align: inherit;
        }
    }
    button,
    input,
    textarea,
    select {
        @include inbl();
        line-height: normal;
    }
    input[type='text'],
    input[type='password'],
    input[type='email'],
    textarea {
        @include transitions(background-color 0.3s);
        outline: 0;
        padding: 5px;
    }
    input[type='checkbox'],
    input[type='radio'] {
        cursor: pointer;
    }
    label {
        @include inbl();

        &[for] {
            @include transition(color);
            cursor: pointer;
        }
    }
    button,
    input[type='submit'] {
        background: transparent;
        border: 0;
        cursor: pointer;
    }
}

// default
// mixin utilisé pour certaines fonctionnalités par défaut
@mixin default() {
    body > div:first-child {
        margin: auto;
        min-height: 100%;
        height: auto;
        position: relative;
        min-width: 900px;
    }
    input[name='-genuine-'] {
        display: none !important;
    }

    @include defaultClasses();
    @include keyframes(fadein) {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
}

// defaultClasses
// mixin qui génère les classes par défaut
@mixin defaultClasses() {
    .clear {
        clear: both;
    }
    .floatLeft {
        float: left;
    }
    .floatRight {
        float: right;
    }
    .alignLeft {
        text-align: left;
    }
    .alignCenter {
        text-align: center;
    }
    .alignRight {
        text-align: right;
    }
    .table {
        @include wh(100%);
        display: table;
    }
    .table-row {
        display: table-row;
    }
    .table-cell {
        display: table-cell;
        vertical-align: middle;
    }
}

// abs
// mixin utilisé pour positionner un élément en absolute
@mixin abs($top: '', $right: '', $bottom: '', $left: '') {
    position: absolute;

    @if ($top != '') {
        top: $top;
    }

    @if ($right != '') {
        right: $right;
    }

    @if ($bottom != '') {
        bottom: $bottom;
    }

    @if ($left != '') {
        left: $left;
    }
}

// fixed
// mixin utilisé pour positionner un élément de façon fixed
@mixin fixed($top: '', $right: '', $bottom: '', $left: '') {
    position: fixed;

    @if ($top != '') {
        top: $top;
    }

    @if ($right != '') {
        right: $right;
    }

    @if ($bottom != '') {
        bottom: $bottom;
    }

    @if ($left != '') {
        left: $left;
    }
}

// flexCenter
// mixin utilisé pour créer un flexbox dont le contenu est centré horizontalement et verticalement
@mixin flexCenter() {
    display: flex;
    align-items: center;
    justify-content: center;
}

// wh
// mixin utilisé pour attribuer une width et une height à un élément
// possible d'ajouter une margin left ou top
@mixin wh($width: 100%, $height: true, $marginLeft: '', $marginTop: '') {
    @if ($width != '') {
        width: $width;
    }

    @if ($height != '') {
        @if ($height == true) {
            $height: $width;
        }

        height: $height;
    }

    @if ($marginLeft != '') {
        @if ($marginLeft == true) {
            margin-left: -(round($width/2));
        } @else {
            margin-left: $marginLeft;
        }
    }

    @if ($marginTop != '') {
        @if ($marginTop == true) {
            margin-top: -(round($height/2));
        } @else {
            margin-top: $marginTop;
        }
    }
}

// inbl
// mixin utilisé pour créer rapidement un élément en display inline-block
@mixin inbl($verticalAlign: middle, $width: '') {
    display: inline-block;

    @if ($verticalAlign != '') {
        vertical-align: $verticalAlign;
    }

    @if ($width != '') {
        width: $width;
    }
}

// blmw
// mixin utilisé pour créer un élément en display block avec un maxWidth
@mixin blmw($maxWidth: 100%, $marginAuto: '') {
    display: block;

    @if ($maxWidth != '') {
        max-width: $maxWidth;
    }

    @if ($marginAuto != '') {
        margin: auto;
    }
}

// bgimg
// mixin utilisé pour ajouter une image d'arrière-plan
@mixin bgimg($filename, $extension: png, $position: '') {
    background-image: url(#{$media}/#{$filename}.#{$extension});
    background-repeat: no-repeat;

    @if ($position != '') {
        background-position: $position;
    }
}

// bgimg64
// mixin utilisé pour ajouter une image d'arrière-plan avec du code base64
@mixin bgimg64($value, $position: '') {
    background-image: url($value);
    background-repeat: no-repeat;

    @if ($position != '') {
        background-position: $position;
    }
}

// cover
// mixin utilisé pour que l'image d'arrière-plan s'adapte à l'espace
@mixin cover($position: center) {
    background-size: cover;
    background-repeat: no-repeat;

    @if ($position != '') {
        background-position: $position;
    }
}

// animate
// mixin utilisé pour créer des animations compatible avec tous les navigateurs
@mixin animate($name, $time: 1s, $delay: 0s, $direction: normal, $fillMode: forwards) {
    -webkit-animation: $name $time $delay $direction $fillMode;
    -moz-animation: $name $time $delay $direction $fillMode;
    -ms-animation: $name $time $delay $direction $fillMode;
    -o-animation: $name $time $delay $direction $fillMode;
    animation: $name $time $delay $direction $fillMode;
}

// animateCancel
// mixin utilisé pour annuler une animation sur un élément
@mixin animateCancel() {
    -webkit-animation: none;
    -moz-animation: none;
    -ms-animation: none;
    -o-animation: none;
    animation: none;
}

// transition
// mixin utilisé pour ajouter une transition sur un élément
// fournir le nom de la propriété
@mixin transition($prop, $duration: 0.3s) {
    transition: $prop $duration;
    -webkit-transition: $prop $duration;
    -moz-transition: $prop $duration;
    -o-transition: $prop $duration;
    -ms-transition: $prop $duration;
}

// transitionCancel
// mixin utilisé pour annuler une transition sur un élément
@mixin transitionCancel() {
    transition: none;
    -webkit-transition: none;
    -moz-transition: none;
    -o-transition: none;
    -ms-transition: none;
}

// transitions
// mixin utilisé pour créer plusieurs transitions sur un élément
@mixin transitions($props...) {
    -webkit-transition: $props;
    -moz-transition: $props;
    -ms-transition: $props;
    -o-transition: $props;
    transition: $props;
}

// fade in
// mixin pour qu'un élément s'anime avec un fadeIn
@mixin fadeIn($time: 1s) {
    @include animate(fadein, $time);
}

// keyframes
// mixin utilisé pour créer une animation complexe
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @-moz-keyframes #{$name} {
        @content;
    }

    @-ms-keyframes #{$name} {
        @content;
    }

    @-o-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}

// responsiveBlock
// mixin utilisé pour annuler des styles et que l'élément s'affiche en block avec width auto
@mixin responsiveBlock($important: '') {
    @if ($important != '') {
        display: block !important;
        width: auto !important;
        padding: 0 !important;
        margin: 0 !important;
    } @else {
        display: block;
        width: auto;
        padding: 0;
        margin: 0;
    }
}
