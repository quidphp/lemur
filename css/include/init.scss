// compileOnSave: false

/*
 * This file is part of the QuidPHP package.
 * Website: https://quidphp.com
 * License: https://github.com/quidphp/lemur/blob/master/LICENSE
 */

// include
// stylesheet containing many helpers mixins

// var
// variable par défaut
$font: 'Arial', sans-serif;
$white: #fff;
$black: #000;
$media: $uriMedia;

// defaultClasses
// mixin qui génère les classes par défaut
@mixin defaultClasses() {
    .clear {
        clear: both;
    }
    .float-left {
        float: left;
    }
    .float-right {
        float: right;
    }
    .align-left {
        text-align: left;
    }
    .align-center {
        text-align: center;
    }
    .align-right {
        text-align: right;
    }
    .table {
        @include wh(100%);
        display: table;
    }
    .table-row {
        display: table-row;
    }
    .table-cell {
        display: table-cell;
        vertical-align: middle;
    }
}

// defaultAnimation
// mixin qui génère certaines animations par défaut
@mixin defaultAnimation() {
    @include keyframes(fadeIn) {
        from {
            opacity: 0;
            visibility: hidden;
        }
        to {
            opacity: 1;
            visibility: visible;
        }
    }
    
    @include keyframes(fadeOut) {
        from {
            opacity: 1;
            visibility: visible;
        }
        to {
            opacity: 0;
            visibility: hidden;
        }
    }
}

// abs
// mixin utilisé pour positionner un élément en absolute
@mixin abs($top: null, $right: null, $bottom: null, $left: null) {
    position: absolute;

    @if ($top) {
        top: $top;
    }

    @if ($right) {
        right: $right;
    }

    @if ($bottom) {
        bottom: $bottom;
    }

    @if ($left) {
        left: $left;
    }
}

// fixed
// mixin utilisé pour positionner un élément de façon fixed
@mixin fixed($top: null, $right: null, $bottom: null, $left: null) {
    position: fixed;

    @if ($top) {
        top: $top;
    }

    @if ($right) {
        right: $right;
    }

    @if ($bottom) {
        bottom: $bottom;
    }

    @if ($left) {
        left: $left;
    }
}

// flex
// mixin utilisé pour créer un flexbox dont le contenu est centré verticalement
// et possiblement horizontalement
@mixin flex($justify: null, $align: center, $wrap: null, $inline: null) {
    @if ($inline) {
        display: inline-flex;
    } @else {
        display: flex;
    }

    @if ($justify) {
        justify-content: $justify;
    }

    @if ($align) {
        align-items: $align;
    }

    @if ($wrap) {
        flex-wrap: $wrap;
    }
}

// iflex
// mixin utilisé pour créer un inline-flex dont le contenu est centré verticalement
// et possiblement horizontalement
@mixin iflex($justify: null, $align: center, $wrap: null) {
    @include flex($justify, $align, $wrap, true);
}

// wh
// mixin utilisé pour attribuer une width et une height à un élément
// possible d'ajouter une margin left ou top
@mixin wh($width: 100%, $height: true, $marginLeft: null, $marginTop: null) {
    @if ($width) {
        width: $width;
    }

    @if ($height) {
        @if ($height == true) {
            $height: $width;
        }

        height: $height;
    }

    @if ($marginLeft) {
        @if ($marginLeft == true) {
            margin-left: -(round($width/2));
        } @else {
            margin-left: $marginLeft;
        }
    }

    @if ($marginTop) {
        @if ($marginTop == true) {
            margin-top: -(round($height/2));
        } @else {
            margin-top: $marginTop;
        }
    }
}

// inbl
// mixin utilisé pour créer rapidement un élément en display inline-block
@mixin inbl($verticalAlign: middle, $width: null) {
    display: inline-block;

    @if ($verticalAlign) {
        vertical-align: $verticalAlign;
    }

    @if ($width) {
        width: $width;
    }
}

// blmw
// mixin utilisé pour créer un élément en display block avec un maxWidth
@mixin blmw($maxWidth: 100%, $marginAuto: null) {
    display: block;

    @if ($maxWidth) {
        max-width: $maxWidth;
    }

    @if ($marginAuto) {
        margin: auto;
    }
}

// bgimg
// mixin utilisé pour ajouter une image d'arrière-plan
@mixin bgimg($filename, $extension: png, $position: null) {
    background-image: url(#{$media}/#{$filename}.#{$extension});
    background-repeat: no-repeat;

    @if ($position) {
        background-position: $position;
    }
}

// bgimg64
// mixin utilisé pour ajouter une image d'arrière-plan avec du code base64
@mixin bgimg64($value, $position: null) {
    background-image: url($value);
    background-repeat: no-repeat;

    @if ($position) {
        background-position: $position;
    }
}

// cover
// mixin utilisé pour que l'image d'arrière-plan s'adapte à l'espace
@mixin cover($position: center) {
    background-size: cover;
    background-repeat: no-repeat;

    @if ($position) {
        background-position: $position;
    }
}

// animate
// mixin utilisé pour créer des animations compatible avec tous les navigateurs
@mixin animate($name, $time: 1s, $delay: 0s, $direction: normal, $fillMode: forwards) {
    -webkit-animation: $name $time $delay $direction $fillMode;
    -moz-animation: $name $time $delay $direction $fillMode;
    -ms-animation: $name $time $delay $direction $fillMode;
    -o-animation: $name $time $delay $direction $fillMode;
    animation: $name $time $delay $direction $fillMode;
}

// animateCancel
// mixin utilisé pour annuler une animation sur un élément
@mixin animateCancel() {
    -webkit-animation: none;
    -moz-animation: none;
    -ms-animation: none;
    -o-animation: none;
    animation: none;
}

// transition
// mixin utilisé pour ajouter une transition sur un élément
// fournir le nom de la propriété
@mixin transition($prop, $duration: 0.3s) {
    transition: $prop $duration;
    -webkit-transition: $prop $duration;
    -moz-transition: $prop $duration;
    -o-transition: $prop $duration;
    -ms-transition: $prop $duration;
}

// transitionCancel
// mixin utilisé pour annuler une transition sur un élément
@mixin transitionCancel() {
    transition: none;
    -webkit-transition: none;
    -moz-transition: none;
    -o-transition: none;
    -ms-transition: none;
}

// transitions
// mixin utilisé pour créer plusieurs transitions sur un élément
@mixin transitions($props...) {
    -webkit-transition: $props;
    -moz-transition: $props;
    -ms-transition: $props;
    -o-transition: $props;
    transition: $props;
}

// fade in
// mixin pour qu'un élément s'anime avec un fadeIn
@mixin fadeIn($time: 1s) {
    @include animate(fadeIn, $time);
}

// fade out
// mixin pour qu'un élément s'anime avec un fadeOut
@mixin fadeOut($time: 1s) {
    @include animate(fadeOut, $time);
}

// keyframes
// mixin utilisé pour créer une animation complexe
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @-moz-keyframes #{$name} {
        @content;
    }

    @-ms-keyframes #{$name} {
        @content;
    }

    @-o-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}

// responsive
// mixin utilisé pour mettre des règles responsives
@mixin responsive($maxWidth: 900px) {
    @media screen and (max-width: $maxWidth), screen and (orientation: portrait) {
        @content;
    }
}

// print
// mixin utilisé pour mettre des règles pour l'impression
@mixin print() {
    @media print {
        @content;
    }
}

// responsiveSize
// mixin utilisé pour annuler les styles width, padding et margin
@mixin responsiveSize($important: null) {
    @if ($important) {
        width: auto !important;
        padding: 0 !important;
        margin: 0 !important;
    } @else {
        width: auto;
        padding: 0;
        margin: 0;
    }
}

// responsiveBlock
// mixin utilisé pour annuler des styles et que l'élément s'affiche en block avec width auto
@mixin responsiveBlock($important: null) {
    @if ($important) {
        @include responsiveSize($important);
        display: block !important;
    } @else {
        @include responsiveSize($important);
        display: block;
    }
}

// responsiveFlex
// mixin utilisé que les éléments s'affiche en flex column
@mixin responsiveFlex($justify: null, $align: null, $wrap: wrap, $important: null) {
    @if ($important) {
        flex-direction: column !important;

        @if ($align) {
            align-items: $align !important;
        }

        @if ($justify) {
            justify-content: $justify !important;
        }

        @if ($wrap) {
            flex-wrap: $wrap !important;
        }
    } @else {
        flex-direction: column;

        @if ($align) {
            align-items: $align !important;
        }

        @if ($justify) {
            justify-content: $justify;
        }

        @if ($wrap) {
            flex-wrap: $wrap;
        }
    }
}

// disableSelection
// désactive la possibilité de sélectionner du contenu
@mixin disableSelection() {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

// triangle
// mixin pour faire un triangle
@mixin triangle($side, $color: $black, $dimension: 16px, $transparent: null) {
    @if (not $transparent) {
        $transparent: ($dimension/2);
    }

    @if ($side == 'top') {
        border-top: 0;
        border-left: $transparent solid transparent;
        border-right: $transparent solid transparent;
        border-bottom: $dimension solid $color;
    }

    @if ($side == 'bottom') {
        border-bottom: 0;
        border-left: $transparent solid transparent;
        border-right: $transparent solid transparent;
        border-top: $dimension solid $color;
    }

    @if ($side == 'left') {
        border-left: 0;
        border-top: $transparent solid transparent;
        border-bottom: $transparent solid transparent;
        border-right: $dimension solid $color;
    }

    @if ($side == 'right') {
        border-right: 0;
        border-top: $transparent solid transparent;
        border-bottom: $transparent solid transparent;
        border-left: $dimension solid $color;
    }
}
